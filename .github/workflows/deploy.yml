# GitHub Actions Workflow for Vulkan Labs Website
# File: .github/workflows/deploy.yml

name: Deploy Vulkan Labs Website

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly to check for security updates
    - cron: '0 0 * * 0'

jobs:
  # Quality assurance and testing
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install -g lighthouse htmlhint stylelint eslint
        
    - name: Validate HTML
      run: |
        htmlhint index.html 404.html
        
    - name: Validate CSS
      run: |
        stylelint style.css --config-basedir ./
        
    - name: Validate JavaScript
      run: |
        eslint script.js --no-eslintrc --env browser,es6 --parserOptions ecmaVersion:2022
        
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun --collect.url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
      continue-on-error: true
      
    - name: Security scan
      run: |
        # Check for common security issues
        grep -r "document.write\|eval\|innerHTML\|outerHTML" . --include="*.js" --include="*.html" || echo "No security issues found"
        
    - name: Performance audit
      run: |
        # Check file sizes
        find . -name "*.js" -o -name "*.css" -o -name "*.html" | xargs ls -la
        
  # Build and optimize
  build:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install build tools
      run: |
        npm install -g html-minifier clean-css-cli terser
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Minify HTML files
      run: |
        html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js index.html -o build/index.html
        html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js 404.html -o build/404.html
        
    - name: Minify CSS
      run: |
        cleancss -o build/style.css style.css
        
    - name: Minify JavaScript
      run: |
        terser script.js -o build/script.js --compress --mangle
        
    - name: Copy other files
      run: |
        cp manifest.json build/
        cp sw.js build/
        cp robots.txt build/
        cp sitemap.xml build/
        cp CNAME build/ 2>/dev/null || echo "No CNAME file found"
        
    - name: Generate integrity hashes
      run: |
        cd build
        sha384sum style.css | cut -d' ' -f1 | xxd -r -p | base64 > style.css.integrity
        sha384sum script.js | cut -d' ' -f1 | xxd -r -p | base64 > script.js.integrity
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: website-build
        path: build/
        
  # Deploy to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: website-build
        path: ./
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
  # Monitor website health
  monitor:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Check website status
      run: |
        URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL)
        if [ $HTTP_STATUS -eq 200 ]; then
          echo "‚úÖ Website is accessible"
        else
          echo "‚ùå Website returned HTTP $HTTP_STATUS"
          exit 1
        fi
        
    - name: Run final Lighthouse audit
      run: |
        npm install -g lighthouse
        lighthouse "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless --no-sandbox"
        
    - name: Parse Lighthouse results
      run: |
        node -e "
        const fs = require('fs');
        const report = JSON.parse(fs.readFileSync('./lighthouse-report.json', 'utf8'));
        const scores = report.lhr.categories;
        console.log('üîç Lighthouse Scores:');
        console.log('Performance:', Math.round(scores.performance.score * 100));
        console.log('Accessibility:', Math.round(scores.accessibility.score * 100));
        console.log('Best Practices:', Math.round(scores['best-practices'].score * 100));
        console.log('SEO:', Math.round(scores.seo.score * 100));
        "
        
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "üåê Website URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "üí• Deployment failed!"
        echo "Please check the logs for more information."

  # Security scanning
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        # Check for vulnerable dependencies
        if [ -f package.json ]; then
          npm audit --audit-level high
        fi
        
    - name: Check for secrets
      run: |
        # Simple check for potential secrets
        grep -r "password\|secret\|key\|token" . --include="*.js" --include="*.html" --include="*.css" || echo "No potential secrets found"
        
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}'